@using Toss.Shared.Account
@page "/account/resetPassword/{userId}/{code}"
@inject IHttpApiClientRequestBuilderFactory ClientFactory;
@layout LoginLayout
<h2>TOSS</h2>
<h4>Reset your password.</h4>
<hr />
<div class="row">
    <div class="col-sm">
        <form method="post" >
            <div class="form-group">
                <label for="Email">Email</label>
                <input id="Email" bind="@command.Email" class="form-control" />
                <ValidationError Errors="@_errors" FieldName="Email" />
            </div>
            <div class="form-group">
                <label for="Password">Password</label>
                <input id="Password" bind="@command.Password" type="password" class="form-control" />
                <ValidationError Errors="@_errors" FieldName="Password" />
            </div>
            <div class="form-group">
                <label for="ConfirmPassword">Confirm Password</label>
                <input id="ConfirmPassword" bind="@command.ConfirmPassword" type="password" class="form-control" />
                <ValidationError Errors="@_errors" FieldName="ConfirmPassword" />
            </div>
            <button type="button" onclick="@ResetPassword" class="btn btn-default">Reset</button>
        </form>
    </div>
</div>


@functions{
    [Parameter]
    private string userId { get; set; }
    [Parameter]
    private string code { get; set; }
    ResetPasswordCommand command = new ResetPasswordCommand();
    Dictionary<string,List<string>> _errors;
    async Task ResetPassword()
    {
        command.Code = code;
        await ClientFactory.Create("/api/account/resetPassword")
            .OnBadRequest<Dictionary<string,List<string>>>(errors => _errors = errors)
            .OnOK("Your password has been reset you can now logon.","/login")
            .Post(command);
        StateHasChanged();
    }
}


