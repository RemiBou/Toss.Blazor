@inject IHttpApiClientRequestBuilderFactory ClientFactory;
@inject NavigationManager UriHelper
@inject IAccountService AccountService;
@inject ApiAuthenticationStateProvider AuthenticationStateProvider;
<div class="pure-form  pure-form-stacked">
    <fieldset>
        <legend>
            Use a Toss account to log in.
        </legend>
        <EditForm Model="@command" OnValidSubmit="@TryLogin">
            <DataAnnotationsValidator />
            <ServerSideValidator @ref="serverSideValidator" />

            <label for="UserName">Username</label>


            <InputText Id="UserName" @bind-Value="@command.UserName" />
            <ValidationMessage For="@(() => command.UserName)" />


            <label asp-for="Password">Password</label>


            <MyInput type="password" Id="Password" Autocomplete="current-password" @bind-Value="@command.Password" />
            <ValidationMessage For="@(() => command.Password)" />


            <label class="pure-checkbox" for="RememberMe">
                <InputCheckbox @bind-Value="@command.RememberMe"></InputCheckbox>
                Remember me
            </label>
            <SubmitButton CssClass="pure-button  pure-button-primary" Id="BtnLogin">Log in</SubmitButton>
            <NavLink href="/register" id="LinkRegister">Create an account</NavLink>
            <NavLink href="/account/forgotPassword">Forgot your password?</NavLink>
        </EditForm>
    </fieldset>
</div>

@functions{
    LoginCommand command = new LoginCommand();
    ServerSideValidator serverSideValidator;
    async Task<bool> TryLogin()
    {

        await ClientFactory.Create("/api/account/login")
               .OnBadRequest<Dictionary<string, List<string>>>(
                    errors => serverSideValidator.DisplayErrors(errors)
                )
               .OnOK(() =>
               {
                   AuthenticationStateProvider.MarkUserAsAuthenticated();
                   UriHelper.NavigateTo("/");
               })
               .Post(command);
        StateHasChanged();
        return false;
    }
}
