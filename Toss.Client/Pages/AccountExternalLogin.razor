@using Toss.Shared.Account
@page "/account/externalLogin"
@inject IHttpApiClientRequestBuilderFactory ClientFactory;

<h4>Associate your @command.Provider account.</h4>
<hr />

<p class="text-info">
    You've successfully authenticated with <strong> @command.Provider </strong>.
    Please enter an email address and a login for this site below and click the Register button to finish
    logging in.
</p>

<div class="row">
    <div class="col-md-4">

        <EditForm Model="command" OnValidSubmit="@ExternalLoginConfirm">
            <DataAnnotationsValidator />
            <ServerSideValidator ref="serverSideValidator" />
            <div class="form-group">
                <label for="Email">Email</label>
                <InputText Class="form-control" bind-Value="@command.Email" />
                <ValidationMessage For="@(() => command.Email)" />
            </div>
            <button type="submit"  class="btn btn-primary">Register</button>
         </EditForm>
    </div>
</div>


@functions {
    ServerSideValidator serverSideValidator;
    ExternalLoginConfirmationCommand command = new ExternalLoginConfirmationCommand();
    protected override async Task OnInitAsync()
    {
        await ClientFactory.Create("/api/account/externalLoginDetails")
            .OnOK<ExternalLoginConfirmationCommand>(a => command = a)
            .Get();
        StateHasChanged();
    }
    async Task ExternalLoginConfirm()
    {
        await ClientFactory.Create("/api/account/externalLoginConfirmation")
            .OnBadRequest<Dictionary<string,List<string>>>(errors => serverSideValidator.DisplayErrors(errors))
            .OnOK("Account successfully set", "/")
            .Post(command);
        StateHasChanged();
    }
}
