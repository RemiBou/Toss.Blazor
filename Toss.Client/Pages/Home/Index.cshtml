@page "/"
@page "/tag/{CurrentTag}/{TossId}"
@page "/tag/{CurrentTag}"
@page "/tag/"
@inject IHttpApiClientRequestBuilderFactory ClientFactory
@inject IAccountService AccountService
@inject IUriHelper uriHelper

<div class="form-inline">
    @if (currentAccount != null)
    {
        <NewToss OnNewTossCreated="@RefreshTossList"></NewToss>
    }
    <HashTagBar CurrentTag="@CurrentTag"></HashTagBar>
    <button type="button" class="btn btn-warning" onclick="@RefreshTossList"><i class="fas fa-sync"></i></button>
</div>
<div class="row">
    @if (string.IsNullOrEmpty(CurrentTag))
    {
        <div class="col-md-3 col-sm-6 my-2">
            <div class="card text-white bg-warning   h-100">
                <div class="card-body">
                    <h5 class="card-title">Select a hashtag</h5>
                    <p class="card-text">Use the textbox below for searching content based on a hashtag.</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <OneTossDetail ref="tossDetail" OnTossDetailHide="OnTossDetailHide"></OneTossDetail>
        <SponsoredToss CurrentTag="@CurrentTag"></SponsoredToss>
       
        @if (Tosses != null )
        {
            if(Tosses.Any()){
                foreach (var toss in Tosses?.OrderByDescending(t => t.CreatedOn))
                {
                    <OneToss toss="@toss" ShowDetailDelegate="ShowDetail" />
                }
            }
            else{
                <div class="col-md-3 col-sm-6 my-2">
                    <div class="card text-white bg-warning   h-100">
                        <div class="card-body">
                            <h5 class="card-title">Nothing to show</h5>
                            <p class="card-text">There is not Toss for #@CurrentTag yet :( <br /> It's up to you to start something.</p>
                        </div>
                    </div>
                </div>
            }           
        }
        else if(Loading){
            <div class="col-md-3 col-sm-6 my-2">
                <div class="card text-white bg-warning   h-100">
                    <div class="card-body">
                        <h5 class="card-title">Loading</h5>
                        <p class="card-text">We are loading the tosses ...</p>
                    </div>
                </div>
            </div>
        }
    }
</div>
@functions{
    OneTossDetail tossDetail;

    List<TossLastQueryItem> Tosses;

    [Parameter]
    private string CurrentTag { get; set; } = "";

    [Parameter]
    private string TossId { get; set; } = "";

    private string DisplayedTag;

    private AccountViewModel currentAccount;

    private bool Loading {get;set;} = false;

    protected async override Task OnInitAsync()
    {
        currentAccount = await AccountService.CurrentAccount();

    }

    protected override async Task OnParametersSetAsync()
    {
        if (DisplayedTag != CurrentTag)
            await RefreshTossList();
        if (!string.IsNullOrEmpty(TossId))
            await tossDetail.ShowDetail(TossId);
    }

    public override async Task SetParametersAsync(ParameterCollection parameters)
    {

        if (string.IsNullOrEmpty(parameters.GetValueOrDefault<string>("CurrentTag")))
        {
            CurrentTag = null;
        }
        if (string.IsNullOrEmpty(parameters.GetValueOrDefault<string>("TossId")))
        {
            TossId = null;
        }
        await base.SetParametersAsync(parameters);
    }

    protected async Task RefreshTossList()
    {
        
        DisplayedTag = CurrentTag;
        Tosses = null;
        if (string.IsNullOrWhiteSpace(CurrentTag))
            return;
        Loading = true;
        await ClientFactory.Create("/api/toss/last?query.HashTag=" + CurrentTag)
            .OnOK<List<TossLastQueryItem>>(l =>
            {
                Tosses = l;
                Loading = false;
                StateHasChanged();
            })
            .Get();
    }

    protected Task ShowDetail(string tossId)
    {
        this.uriHelper.NavigateTo("/tag/" + CurrentTag + "/" + tossId);
        return Task.CompletedTask;
    }

    private Task OnTossDetailHide()
    {
        this.uriHelper.NavigateTo("/tag/" + CurrentTag);
        return Task.CompletedTask;

    }
}
