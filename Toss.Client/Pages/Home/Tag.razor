@page "/tag/{tag}"
@inject IHttpApiClientRequestBuilderFactory ClientFactory;
@inject IAccountService AccountService;
@inject IUriHelper uriHelper;
@inject IMessageService messageService;
@layout MainLayout

<div class="pure-g tag-result">

    <div class="pure-u-5-5 tag-header">

        <h1>
            #@tag
            @if (currentAccount != null)
            {
                if (!currentAccount.Hashtags.Contains(tag))
                {
                    <button class="pure-button" onclick="@AddHashtag">Add</button>
                }
                else
                {
                    <button class="pure-button" onclick="@RemoveHashTag">Remove</button>
                }
            }
            <ConnectedTagsBar Hashtag="@tag"></ConnectedTagsBar>
        </h1>


    </div>

    @if (Tosses.Any())
    {
        foreach (var tossGroup in Tosses)
        {
            <AdToss tag="@tag"></AdToss>
            foreach (var toss in tossGroup)
            {
                <OneToss toss="@toss" />
            }
        }
        if (!LastPage)
        {
            if (!Loading)
            {
                <div class="page-next pure-u-2-5" onclick="@ShowMore">
                    Click here to load more Toss for  #@tag.
                </div>
            }
        }
        else
        {
            <div class="page-end pure-u-2-5">
                This is all we have for #@tag.
            </div>
        }
    }
    else if (!Loading)
    {
        <div class="no-content pure-u-2-5">
            There is not Toss for #@tag yet :( <br /> It's up to you to start something.
        </div>
    }
    @if (Loading)
    {
        <div class="loading pure-u-2-5">
            Loading
        </div>
    }
</div>
@functions{

    List<List<TossLastQueryItem>> Tosses = new List<List<TossLastQueryItem>>();

    [Parameter]
    private string tag { get; set; } = "";


    private string DisplayedTag;

    private AccountViewModel currentAccount;

    private bool Loading { get; set; } = false;

    public bool LastPage { get; set; } = false;

    protected int Page { get; set; } = 0;

    protected async override Task OnInitAsync()
    {
        currentAccount = await AccountService.CurrentAccount();

    }

    protected override async Task OnParametersSetAsync()
    {
        if (DisplayedTag != tag)
        {
            await GetTosstag();
        }
    }

    public override async Task SetParametersAsync(ParameterCollection parameters)
    {

        if (string.IsNullOrEmpty(parameters.GetValueOrDefault<string>("tag")))
        {
            tag = null;
        }

        await base.SetParametersAsync(parameters);
    }
    protected async Task ResettagDisplay()
    {
        ResetDisplayState();
        await GetTosstag();
    }
    private void ResetDisplayState()
    {
        Tosses = new List<List<TossLastQueryItem>>();
        LastPage = false;
        Page = 0;
    }
    protected async Task GetTosstag()
    {
        if (DisplayedTag != tag)
        {
            ResetDisplayState();
        }
        DisplayedTag = tag;
        if (string.IsNullOrWhiteSpace(tag))
        {
            return;//
        }
        Loading = true;
        await ClientFactory.Create("/api/toss/last?query.HashTag=" + tag + "&query.Page=" + Page)
            .OnOK<List<TossLastQueryItem>>(l =>
            {
                Tosses.Add(l);

                Loading = false;
                if (l.Count < TossLastQuery.TossPerPage)
                {
                    LastPage = true;
                }
                StateHasChanged();
            })
            .Get();
    }

    protected async Task ShowMore()
    {
        Page++;
        await GetTosstag();
    }
    protected async Task AddHashtag()
    {

        await ClientFactory.Create("/api/account/addHashTag")
            .OnOK(() =>
           {

               messageService.Info("Hashtag added with success");
               currentAccount.Hashtags.Add(tag);
           })
            .OnBadRequest<Dictionary<string, List<string>>>(e => messageService.Error(string.Join(",", e["NewHashTag"])))
            .Post(new AddHashtagCommand(tag));
        StateHasChanged();

    }

    protected async Task RemoveHashTag()
    {
        await ClientFactory.Create("/api/account/removeHashTag")
              .OnOK(() =>
             {
                  messageService.Info("Hashtag removed with success");
                  currentAccount.Hashtags.Remove(tag);
              })
              .Post(new RemoveHashTagCommand(tag));

    }
}
