@page "/new"
@inject IHttpApiClientRequestBuilderFactory Http
@implements IStripeCallBack
@inject IJsInterop JsInterop;
@inject NavigationManager navigationManager;
@inject IMessageService messageService;
@layout MainLayout

<div class="new-toss">
    <h1>
        New Toss
    </h1>
    <div class=" pure-form pure-form-stacked">       
        <AuthorizeView>
            <Authorized>
                <EditForm Context="editFormContext" Model="@command" OnValidSubmit="SendToss">
                    <fieldset>

                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <ServerSideValidator @ref="serverSideValidator"></ServerSideValidator>

                        <InputTextArea Id="TxtNewToss" @bind-Value="@command.Content"></InputTextArea>
                        <ValidationMessage For="@(() => command.Content)" />
                        <span class="pure-form-message"><a href="https://www.markdownguide.org/cheat-sheet" target="_blank">Markdown syntax</a> supported</span>




                        <label class="pure-checkbox" for="sponsoredToss">
                            <InputCheckbox @bind-Value="isSponsoredToss" id="sponsoredToss" />
                            New Ad
                        </label>

                        @if (isSponsoredToss)
                        {
                            <div class="alert alert-info mt-2">
                                You can create a Ad :
                                <ul>
                                    <li>One ad, picked randomly, will be displayed every 10 Toss on the matching tags.</li>
                                    <li>One display costs @((decimal)TossCreateCommand.CtsCostPerDisplay / 100) €, you can buy between 50 and 1000 displays. Once you click on "Create this Toss" you will be redirected to the payment system.</li>
                                    <li>The Toss will be displayed as a normal Toss, once we get the payment confirmation it will also be displayed as an ad like said before.</li>
                                </ul>
                            </div>
                            <label for="TxtDisplayCount">Display count</label>
                            <InputNumber @bind-Value="@command.SponsoredDisplayedCount"></InputNumber>
                            <ValidationMessage For="@(() => command.SponsoredDisplayedCount)" />

                        }
                        <SubmitButton Id="BtnNewToss" CssClass="pure-button pure-button-primary">
                            Create this Toss
                            @if (isSponsoredToss)
                            {
                                <small class="">(and pay @(command.SponsoredDisplayedCount * (decimal)TossCreateCommand.CtsCostPerDisplay / 100) €)</small>
                            }
                        </SubmitButton>
                    </fieldset>
                </EditForm>
            </Authorized>
            <NotAuthorized>
                <div class="message-warning">
                    If you want to create a Toss, you need an account.<br />
                    If you already have on, you just have to <NavLink href="/login">Login</NavLink>.<br />
                    If you don't already have an account, you can <NavLink href="/register">create one</NavLink>.
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>
@code{

    bool isSponsoredToss
    {
        get
        {
            return command.SponsoredDisplayedCount.HasValue;
        }
        set
        {
            if (value)
            {
                command.SponsoredDisplayedCount = 50;
            }
            else
            {
                command.SponsoredDisplayedCount = null;
            }
        }
    }

    TossCreateCommand command = new TossCreateCommand();
    ServerSideValidator serverSideValidator;

    protected override void OnInitialized()
    {
        base.OnInitialized();

     
    }
    protected async Task SendToss()
    {
        if (isSponsoredToss)
        {
            await JsInterop.OpenStripe(this, command.SponsoredDisplayedCount.Value * TossCreateCommand.CtsCostPerDisplay);
            return;
        }
        await DoSendToss();

    }
    private async Task DoSendToss()
    {
        await Http.Create("/api/toss/create")
            .OnOK(() =>
            {
                command = new TossCreateCommand();
                messageService.Info("Toss successfully created.");
                navigationManager.NavigateTo("/");
            })
            .OnBadRequest<Dictionary<string, List<string>>>(e => serverSideValidator.DisplayErrors(e))
            .Post(command);
        StateHasChanged();
    }

    [JSInvokable]
    public async Task TokenReceived(string token)
    {
        command.StripeChargeToken = token;
        await DoSendToss();
    }
}
