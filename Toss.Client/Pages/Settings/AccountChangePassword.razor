@inject IHttpApiClientRequestBuilderFactory Http;
@inject NavigationManager UriHelper
@inject IMessageService messageService
@inject ApiAuthenticationStateProvider ApiAuthenticationStateProvider

    <div class="pure-form  pure-form-stacked">
        @if (ApiAuthenticationStateProvider.Account.HasPassword)
        {

            <fieldset>
                <legend>Change password</legend>
                <EditForm Model="@command" OnValidSubmit="ChangePassword">
                    <DataAnnotationsValidator />
                    <ServerSideValidator @ref="serverSideValidator" />
                    <label for="OldPassword">Old Password</label>
                    <MyInput type="password" Autocomplete="current-password" @bind-Value="@command.OldPassword" />
                    <ValidationMessage For="@(() => command.OldPassword)" />

                    <label for="NewPassword"> New Password</label>
                    <MyInput type="password" Autocomplete="new-password" @bind-Value="@command.NewPassword" />
                    <ValidationMessage For="@(() => command.NewPassword)" />

                    <label for="ConfirmPassword">Confirm Password</label>
                    <MyInput type="password" Autocomplete="new-password" @bind-Value="@command.ConfirmPassword" />
                    <ValidationMessage For="@(() => command.ConfirmPassword)" />
                    <SubmitButton CssClass="pure-button pure-button-primary">Update password</SubmitButton>
                </EditForm>
            </fieldset>
        }
        else
        {
            <div class="message-warning">You are logging in through an external provider such as Google, you can not change your password as you don't have one here. Go to your provider profile and change your password there.</div>

        }
    </div>
        @code{
            ChangePasswordCommand command = new ChangePasswordCommand();
            ServerSideValidator serverSideValidator;
            async Task ChangePassword()
            {

                await Http.Create("/api/account/changePassword")
                    .OnBadRequest<Dictionary<string, List<string>>>(errors => serverSideValidator.DisplayErrors(errors))
                    .OnOK(() =>
                   {
                       messageService.Info("Password changed successfully");
                       command = new ChangePasswordCommand();
                   })
                    .Post(command);
                StateHasChanged();
            }
        }
