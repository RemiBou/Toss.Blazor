@inject IHttpApiClientRequestBuilderFactory Http;
@inject NavigationManager UriHelper
@inject ApiAuthenticationStateProvider ApiAuthenticationStateProvider
@inject IMessageService MessageService;

<div class="pure-form  pure-form-stacked">
    <fieldset>
        <legend>Informations</legend>
        <EditForm Model="command" OnValidSubmit="@PostAccount">
            <DataAnnotationsValidator />
            <ServerSideValidator @ref="serverSideValidator" />

            <label for="Email">Email</label>
            <InputText Class="form-control" @bind-Value="@command.Email" />
            <ValidationMessage For="@(() => command.Email)" />

            <label for="Name">User name</label>
            <InputText Class="form-control" @bind-Value="@command.Name" />
            <ValidationMessage For="@(() => command.Name)" />


            <label for="Bio">Bio</label>
            <InputTextArea Id="TxtBio" @bind-Value="@command.Bio"></InputTextArea>
            <ValidationMessage For="@(() => command.Bio)" />

            <SubmitButton CssClass="pure-button pure-button-primary">Save</SubmitButton>
        </EditForm>
    </fieldset>
</div>
@code {
    ServerSideValidator serverSideValidator;
    EditAccountCommand command = new EditAccountCommand();
    protected override void OnInitialized()
    {
        command.Email = ApiAuthenticationStateProvider.Account.Email;
        command.Name = ApiAuthenticationStateProvider.Account.Name;
        command.Bio = ApiAuthenticationStateProvider.Account.Bio;
        StateHasChanged();
    }
    async Task PostAccount()
    {
        await Http.Create("/api/account/edit")
            .OnBadRequest<Dictionary<string, List<string>>>(errors => serverSideValidator.DisplayErrors(errors))
            .OnOK(() => {
                MessageService.Info("Your account was updated successfully");
                ApiAuthenticationStateProvider.RefreshCurrentUser();
            })
            .Post(command);
        StateHasChanged();
    }
}

