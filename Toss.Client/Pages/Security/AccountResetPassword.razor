@using Toss.Shared.Account
@page "/account/resetPassword/{userId}/{code}"
@inject IHttpApiClientRequestBuilderFactory ClientFactory;
<h2>TOSS</h2>
<h4>Reset your password.</h4>

<EditForm Model="command" OnValidSubmit="ResetPassword">
    <DataAnnotationsValidator />
    <ServerSideValidator ref="serverSideValidator" />
    <div class="form-group">
        <label for="Email">Email</label>
        <InputText Class="form-control" bind-Value="@command.Email" />
        <ValidationMessage For="@(() => command.Email)" />
    </div>
    <div class="form-group">
        <label for="Password">Password</label>
        <MyInput type="password"Class="form-control" Autocomplete="new-password" bind-Value="@command.Password" />
        <ValidationMessage For="@(() => command.Password)" />
    </div>
    <div class="form-group">
        <label for="ConfirmPassword">Confirm Password</label>
        <MyInput type="password"Class="form-control" Autocomplete="new-password" bind-Value="@command.ConfirmPassword" />
        <ValidationMessage For="@(() => command.ConfirmPassword)" />
    </div>
    <SubmitButton CssClass="btn btn-primary">Reset</SubmitButton>
</EditForm>


@functions{
    [Parameter]
    private string userId { get; set; }
    [Parameter]
    private string code { get; set; }
    ResetPasswordCommand command = new ResetPasswordCommand();
    ServerSideValidator serverSideValidator;
    async Task ResetPassword()
    {
        command.Code = code;
        await ClientFactory.Create("/api/account/resetPassword")
            .OnBadRequest<Dictionary<string,List<string>>>(errors => serverSideValidator.DisplayErrors(errors))
            .OnOK("Your password has been reset you can now logon.","/login")
            .Post(command);
        StateHasChanged();
    }
}


