@using Toss.Shared.Account
@page "/account/resetPassword/{userId}/{code}"
@inject IHttpApiClientRequestBuilderFactory ClientFactory;
@layout MainLayout;
<h1>Reset your password.</h1>
<div class="pure-form pure-form-stacked">
    <EditForm Model="command" OnValidSubmit="ResetPassword">
        <DataAnnotationsValidator />
        <ServerSideValidator @ref="serverSideValidator" />

        <label for="Email">Email</label>
        <MyInput Type="text" @bind-Value="@command.Email" />
        <ValidationMessage For="@(() => command.Email)" />

        <label for="Password">Password</label>
        <MyInput type="password" Autocomplete="new-password" @bind-Value="@command.Password" />
        <ValidationMessage For="@(() => command.Password)" />

        <label for="ConfirmPassword">Confirm Password</label>
        <MyInput type="password" Autocomplete="new-password" @bind-Value="@command.ConfirmPassword" />
        <ValidationMessage For="@(() => command.ConfirmPassword)" />

        <SubmitButton CssClass="pure-button pure-button-primary">Set my password</SubmitButton>
    </EditForm>

</div>
@functions{
    [Parameter] public string userId { get; set; }
    [Parameter] public string code { get; set; }
    ResetPasswordCommand command = new ResetPasswordCommand();
    ServerSideValidator serverSideValidator;
    async Task ResetPassword()
    {
        command.Code = code;
        await ClientFactory.Create("/api/account/resetPassword")
            .OnBadRequest<Dictionary<string, List<string>>>(errors =>
            {
                serverSideValidator.DisplayErrors(errors);
                StateHasChanged();
            })
            .OnOK("Your password has been reset you can now logon.", "/login")
            .Post(command);
        StateHasChanged();
    }
}


