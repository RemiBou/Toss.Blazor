@using Toss.Shared.Account
@page "/account/externalLogin"
@inject IHttpApiClientRequestBuilderFactory ClientFactory;
@layout MainLayout
<h1>Associate your @command.Provider account.</h1>
<div class="message-info">
    You've successfully authenticated with <strong> @command.Provider </strong>.
    Please enter a user name below and click the button for creating your Toss account.
</div>

<div class="pure-form pure-form-stacked">

    <EditForm Model="command" OnValidSubmit="@ExternalLoginConfirm">
        <DataAnnotationsValidator />
        <ServerSideValidator @ref="serverSideValidator" />       

        <label for="UserName">User name</label>
        <MyInput Type="text" @bind-Value="@command.UserName" />
        <ValidationMessage For="@(() => command.UserName)" />
        <SubmitButton CssClass="pure-button pure-button-primary">Confirm my account</SubmitButton>
    </EditForm>
</div>

@functions {
    ServerSideValidator serverSideValidator;
    ExternalLoginConfirmationCommand command = new ExternalLoginConfirmationCommand();
    protected override async Task OnInitializedAsync()
    {
        await ClientFactory.Create("/api/account/externalLoginDetails")
            .OnOK<ExternalLoginConfirmationCommand>(a => command = a)
            .Get();
        StateHasChanged();
    }
    async Task ExternalLoginConfirm()
    {
        await ClientFactory.Create("/api/account/externalLoginConfirmation")
            .OnBadRequest<Dictionary<string, List<string>>>(errors => serverSideValidator.DisplayErrors(errors))
            .OnOK("Account successfully created", "/")
            .Post(command);
        StateHasChanged();
    }
}
